interpreter_version: v1.0
bricks:
  - name: add_two_numbers
    display_name: 'Add 2 NUMBERS'
    short_description: Receives two numeric inputs and returns their sum, allowing for arithmetic calculations.
    description: |
      ![Alt text](https://images.unsplash.com/photo-1508009603885-50cf7c579365?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1950&q=80)
      # Heading 1
      ## Heading 2
      ### Heading 3
      #### Heading 4
      ##### Heading 5
      ###### Heading 6

      Lorem **ipsum dolor** sit amet, [Google](https://www.google.com) consectetur adipiscing elit. Curabitur rhoncus, justo eget volutpat semper, erat sapien mollis elit, eget congue est augue et metus. Proin sit amet libero id eros vestibulum consequat. Vivamus posuere, elit vitae interdum sollicitudin, risus justo egestas velit, vitae dapibus odio orci vitae nunc.

      **Fusce sed enim volutpat**, Lorem *ipsum dolor sit amet*, consectetur adipiscing elit. Curabitur rhoncus, justo eget volutpat semper, erat sapien mollis elit, eget congue est augue et metus. Proin sit amet libero id eros vestibulum consequat. Vivamus posuere, elit vitae interdum sollicitudin, risus justo egestas velit, vitae dapibus odio orci vitae nunc. Fusce sed enim volutpat.

      Fusce sed enim volutpat:
      - Item 1
      - Item 2

      ---
      Fusce sed enim volutpat:
      1. First item
      2. Second item

      > This is a blockquote

      `requirements==1.2`

      And a code blpck here:

      ```
      from django.conf import settings

      for x in y:
          print(x)


      ```
      ---

      For each thing there is a ~~strikethrough~~ to show!

      | Header 1 | Header 2 |
      |----------|----------|
      | Cell 1   | Cell 2   |
      | Cell 3   | Cell 4   |

      - [x] Task 1 (completed)
      - [ ] Task 2 (not completed)

      is this emoji working?? :smile:

      Term 1
      : Definition 1

      Term 2
      : Definition 2


      content in paragraph with footnote[^1] markup.

      [^1]: footnote explain

      The HTML specification
      is maintained by the W3C.

      *[HTML]: Hyper Text Markup Language
      *[W3C]: World Wide Web Consortium

      Hello~subscript~
      CH~3~CH~2~OH

      here for testing Math:
      function $f$

      $$
      c = \pm\sqrt{a^2 + b^2}
      $$
    type: function
    status: dev
    icon: plus
    python_compatibility:
      - '3.10'
      - '3.9'
      - '3.8'
    file_path: basic_operations.py
    category: basic operations
    version: 1.0.0
    output_prefix: added
    inputs:
      a:
        type: number
      b:
        type: number
    outputs:
      result:
        type: float
    options:
      - name: Has_Value
        type: toggle
        default: false
      - name: Learning_Rate
        type: number
        step: .1
        max: 5
        min: -5
        default: 0
      - name: Algorithm
        type: select
        choices:
          - algo1
          - advanced algorithm
          - another algo
        default: another algo
      - name: Project_Name
        type: input
        default: this is default text
        max_characters: 50
      - name: Prompt
        type: textarea
        default: this is default text a bit more extensive than others
        max_characters: 1000
  - name: safe_divide
    short_description: Performs division of two numbers; if the denominator is zero, it returns a safe value.
    type: function
    icon: divide
    file_path: basic_operations.py
    category: basic operations
    version: 0.2.0
    output_prefix: divided
    inputs:
      a:
        type: float
      b:
        type: float
    outputs:
      result:
        type: float
  - name: modulo
    short_description: Takes two numbers as input, divides the first by the second, and returns the remainder.
    type: function
    icon: square-root-variable
    file_path: basic_operations.py
    category: basic operations
    version: 2.2.0
    inputs:
      a:
        type: number
      b:
        type: float
    outputs:
      result:
        type: float
  - name: str2int
    short_description: Takes text and convert it to integer.
    type: function
    icon: font
    file_path: basic_operations.py
    category: basic operations
    version: 1.2.0
    inputs:
      text:
        type: str
    outputs:
      integer_number:
        type: int
  - name: list_to_vector
    short_description: Accepts a list of numerical values and transforms it into a mathematical vector object.
    type: function
    icon: bezier-curve
    file_path: matrix/matrix_and_vectors.py
    requirements:
      - numpy
    prefix: array
    inputs:
      numbers:
        type: list
    outputs:
      list:
        type: numpytensor
  - name: text_entry
    display_name: 'Text'
    short_description: Textual input not exceeding 4096 characters.
    type: entry
    icon: keyboard
    entry_type: text
    category: entries
    version: 1.2.0
    outputs:
      text_entry:
        type: str
  - name: textarea_entry
    display_name: 'Multiline Text'
    short_description: Multiline textual input that you can use as a manual entry.
    type: entry
    icon: keyboard
    entry_type: textarea
    category: entries
    version: 1.0.0
    outputs:
      textarea_entry:
        type: str
  - name: folder_entry
    display_name: 'Folder Selection'
    short_description: Folder selection on your own machine.
    type: entry
    icon: folder-open
    entry_type: folder
    category: entries
    version: 1.0.0
    outputs:
      folder_entry:
        type: str
  - name: file_entry
    display_name: 'File Selection'
    short_description: File selection on your own machine.
    type: entry
    icon: file
    entry_type: file
    category: entries
    version: 1.0.0
    outputs:
      file_entry:
        type: str
  - name: bar_chart
    display_name: 'Bar Chart'
    short_description: A bar chart visualizes data using rectangular bars, with lengths proportional to the data values.
    type: graph
    icon: chart-simple
    category: graphs
    inputs:
      y:
        type: number[]
      x:
        type: any[]
    optional_inputs:
      x: []
  - name: generate_random_numbers
    short_description: random array of integers.
    type: function
    icon: list
    file_path: basic_operations.py
    category: random operators
    version: 1.1.1
    outputs:
      random_list:
        type: number[]
  - name: compute_mean
    short_description: computing the mean of a list of number.
    type: function
    icon: calculator
    file_path: basic_operations.py
    category: basic operations
    version: 1.1.1
    inputs:
      numbers:
        type: number[]
    outputs:
      random_list:
        type: float
